{%- set execution_date_arg = var("execution_date", "") %}
{%- set run_date = dbt.date_trunc("second", dbt.current_timestamp()) %}

{{
    config(
        materialized='incremental',
        incremental_strategy='insert_overwrite',
        file_format='iceberg',
        iceberg_expire_snapshots='False', 
        custom_location=target.location ~ 'transformed_cwas/',
        table_properties={'write.target-file-size-bytes': '268435456'},
        on_schema_change='append_new_columns',
        full_refresh=true,
        tags=["o3"]
    ) 
}}
     
select 
    {{ dbt_utils.generate_surrogate_key(['projectid','name']) }} as cwas_key,
    cast(id as int) as cwasid,
    cast(projectid as int) as projectid,
    projectinfo,
    name as cwasname,
    cast(statusid as int) as statusid,
    cast(statusdate as timestamp) as statusdate,
    cast(status as int) as status,
    cwastatus as cwasstatus,
    constructiontype,
    cwastatuscolor as cwasstatuscolor,
    description as cwasdescription,
    longdescription as cwaslongdescription,
    externallink,
    revision,
    cast(unitid as int) as unitid,
    cast(plannedreleasedate as timestamp) as plannedreleasedate,
    cast(forecastreleasedate as timestamp) as forecastreleasedate,
    cast(datereleased as timestamp) as datereleased,
    cast(zoneid as int) as zoneid,
    zone,
    unit,
    cwatypeid,
    cwatype,
    cwalayerid,
    cwalayer,
    cwaareareleaseid,
    cwaarearelease,
    cast(plannedstartdate as timestamp) as plannedstartdate,
    cast(actualstartdate as timestamp) as actualstartdate,
    cast(plannedfinishdate as timestamp) as plannedfinishdate,
    cast(actualfinishdate as timestamp) as actualfinishdate,
    cast(plannedduration as int) as plannedduration,
    cast(actualduration as int) as actualduration,
    cast(percentdocumented as float) as percentdocumented,
    cast(percentdocumentedinclusive as float) as percentdocumentedinclusive,
    cast(percentconstraintfree as float) as percentconstraintfree,
    cast(percentdelayfree as float) as percentdelayfree,
    cast(percentapproved as float) as percentapproved,
    cast(percentdeveloped as float) as percentdeveloped,
    cast(datecreated as timestamp) as datecreated,
    createdbyuserid,
    createdbyuser,
    cast(datemodified as timestamp) as datemodified,
    modifiedbyuserid,
    modifiedbyuser,
    cast(isdeleted as boolean) as isdeleted,
    cast(estimatedhours as int) as estimatedhours,
    cast(attachmentcount as int) as attachmentcount,
    cast(priority as int) as priority,
    unitcategoryid,
    unitcategory,
    labels,
    cast(calendarstartdate as timestamp) as calendarstartdate,
    cast(calendarenddate as timestamp) as calendarenddate,
    statuscolor,
    cast(openconstraintcount as int) as openconstraintcount,
    cast(forecaststartdate as timestamp) as forecaststartdate,
    cast(forecastfinishdate as timestamp) as forecastfinishdate,
    cast(plannedcloseoutdate as timestamp) as plannedcloseoutdate,
    cast(actualcloseoutdate as timestamp) as actualcloseoutdate,
    cast(wbsid as int) as wbsid,
    wbs,
    forecastduration,
    responsibleengineeruserid,
    responsibleengineeruser,
    cast(earnedhours as float) as earnedhours,
    cast(plotplancount as int) as plotplancount,
    preferredplotplanid,
    preferredplotplan,
    cast(entitytypeid as int) as entitytypeid,
    cast(percentcomplete as float) as percentcomplete,
    cast(budgetedhours as int) as budgetedhours,
    cast(constructiontypeid as int) as constructiontypeid,
    cast(longleaddays as int) as longleaddays,
    functionalareaid,
    functionalarea,
    source_system_name,
    is_current,
    cast(execution_date as DATE) as execution_date,
    CAST({{run_date}} as DATE) as model_created_date,
    CAST({{run_date}} as DATE) as model_updated_date,
    {{ generate_load_id(model) }} as model_load_id
from {{ source('curated_o3', 'curated_cwas') }}
where is_current = 1
{%- if execution_date_arg -%}
    and execution_date >= '{{ execution_date_arg }}'
{%- elif is_incremental() -%}
    and execution_date > (select max(execution_date) from {{ this }})
{%- endif -%}